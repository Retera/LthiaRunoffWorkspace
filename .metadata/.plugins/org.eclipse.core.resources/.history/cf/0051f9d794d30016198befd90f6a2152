package edu.purdue.agriculture.thia;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;

/**
 * Class YearlyQCalculator : This class reads text files saved on a PC and
 * generates text files in the format needed by the LthiaTabular tool.
 *
 * Edited by Eric Theller on 1/5/2017 - Changed name of class to
 * YearlyQCalculator from Calculations and moved stuff around, and removed
 * dependency on "E:" drive and sub folder structures
 *
 * @editor Eric Theller : ect.software@gmail.com
 *
 * @author Anshi Chitransh : achitran@purdue.edu , anshichitransh@gmail.com
 * @author Akshay Kochar : akochar@purdue.edu , akshaykochar@gmail.com
 *
 */
public class YearlyQCalculator {

	/**
	 * Constructor for Calculations class... Creates a new one and performs
	 * setup.
	 */
	public YearlyQCalculator() {
		/* Calculating S and Pmin */
		sAndpMinCalculation();
	}

	/*
	 * Curve numbers are hard-coded here. Here the curve numbers are 0 and from
	 * 30 till 100. Both extremes included.
	 */
	private final double[] cnArray = { 0, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
			49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
			76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100 };

	/*
	 * For each CN, there is a unique S and unique Pmin = 0.2S The following are
	 * the arrays for the same
	 */
	private final double[] sArray = new double[cnArray.length];
	private final double[] pMinArray = new double[cnArray.length];

	/* VARIABLES */
	private int YEARLENGTH = -1; /* Years simulated */
	private int OBSYEARS = -1; /* Observed years */
	private String STATIONNAME = ""; /* Name of the rain gauge station */
	String VERSION = ""; /* Cligen version */

	/*
	 * RUNOFFcheck : Uncomment the following line to check if the runoff is less
	 * than the precipitation. Also uncomment the remaining two commented blocks
	 * of code labeled as RUNOFFcheck further down in this code.
	 */

	// private double [] pArray = new double[cnArray.length] ;

	/*
	 * Main :
	 *
	 * @args : none
	 *
	 * Reads the text file which contains the Station ID of the polygons on
	 * which we run the tool. Then a series of other functions are called which
	 * generate the output Q file.
	 *
	 * It also check whether the tool ran correctly or not. If not it inputs the
	 * station ID in another file called notDone.txt
	 */
	public static void main(final String[] args) throws IOException {
		if (args.length != 2) {
			System.err.println("Usage: <inputDirectory> <outputDirectory>");
			return;
		}

		/* To calculate the running time of the main function */
		final long startTime = System.nanoTime();
		System.out.printf("RUNNING..");
		System.out.printf("\n\n");

		/* Creating class object to access class functions */
		final YearlyQCalculator calculator = new YearlyQCalculator();

		/*
		 * Create this simple class defined in this file, the "Workspace", that
		 * we use to tell our code where to get input files from and where to
		 * save output files into. We determine these directories based on
		 * arguments to the program.
		 */
		final String inputDirectory = args[0];
		final String outputDirectory = args[1];
		final Workspace workspace = new Workspace(inputDirectory, outputDirectory);

		/*
		 * Step through each of the CLIGEN input TXT files in the
		 * "inputDirectory" and convert to Cligen Q file
		 */
		final List<String> successfulConversions = new ArrayList<>();
		final List<String> failedConversions = new ArrayList<>();
		for (final File cligenTxtFile : new File(inputDirectory).listFiles()) {
			// For TXT files in the input folder, specifically
			if (cligenTxtFile.getPath().toLowerCase().endsWith(".txt")) {
				String stationName = cligenTxtFile.getName();
				stationName = stationName.substring(0, stationName.indexOf('.'));
				try {
					calculator.convertToQRunoff(stationName, workspace);
					successfulConversions.add(stationName);
				} catch (final Exception exc) {
					failedConversions.add(stationName);
				}
			}
		}
		/*
		 * Inform the user about progress
		 */
		System.out.printf("Successful Conversions to Q file : %d. \n", successfulConversions.size());
		System.out.printf("FAILED Conversions to Q file : %d.\n", failedConversions.size());

		System.out.println("XXXXXXXXX :P XXXXXXXXXX");
		final long estimatedTime = System.nanoTime() - startTime;
		System.out.println("Running time:" + (estimatedTime / (Math.pow(10, 9) * 60 * 60)));

	} // main ends

	/* Calculating S based on the standard CN's */
	private final void sAndpMinCalculation() {
		int itt = 0;
		for (itt = 0; itt < cnArray.length; itt++) {
			final double curveNumber = cnArray[itt];
			if (curveNumber == 0) {
				sArray[itt] = 0;
			} else {
				sArray[itt] = (25400 / curveNumber) - 254;
			}
			/* Calculating Pmin for Q > 0 for each value of S */
			pMinArray[itt] = 0.2 * sArray[itt];
		}
	}

	/**
	 * Reads a Cligen, version 5.300, output text file saved on a PC and
	 * generates an Average annual QrunOff file
	 *
	 * @param inFile
	 *            The name of the cligen file to read from inside workspace's
	 *            inputDirectory
	 * @param workspace
	 *            The workspace whose inputDirectory and outputDirectory will be
	 *            used
	 * @throws IOException
	 */
	public void convertToQRunoff(final String inFile, final Workspace workspace) throws IOException {

		/* This is used so that seek option is available */
		RandomAccessFile inputRainfallFile = null;

		/* Input file is opened here */
		try {
			inputRainfallFile = new RandomAccessFile(workspace.getInputFile(inFile + ".txt"), "r");
		} catch (final FileNotFoundException e1) {
			System.out.printf("The file %s was not found (%s)\n\n", inFile, workspace.getInputFile(inFile + ".txt"));
			throw new IOException(e1);
		}

		/* Object to write on a file */
		FileWriter write = null;

		/* Output file is opened here */
		try {
			write = new FileWriter(workspace.getOutputFile(inFile + "q.txt"), false);
		} catch (final FileNotFoundException e1) {
			e1.printStackTrace();
			throw new IOException(e1);
		}
		final PrintWriter outf = new PrintWriter(write);
		String line = null;

		/* Getting data from the input file */
		try {
			/* VARIABLES */
			int count = 1; /*
							 * To count the file lines so that we can skip them
							 * accordingly
							 */
			int yPlace = -1, pPlace = -1;
			int year = -1;
			double precp = -1;
			int check = 2; /* To check if year changes */
			int i = 0; /* Loop variable */

			/* Getting data from the 3rd, 5th and 14th line in the input file */
			while (((line = inputRainfallFile.readLine()) != null) && count <= 14) {

				/* Getting station name and version */
				if (count == 3 || count == 5) {
					readData(line, count);
				} // if ends here

				/* Getting the number of observed years */
				if (count == 14) {
					yPlace = colPlace(line, 'y');
					pPlace = colPlace(line, 'p');
				} // if ends here

				count++;
			} // while ends here

			/*
			 * At this point we have : simulated yearlength, obs years version
			 * number, station name, col place of precp and year
			 */

			/* Printing the data found so far */
			outf.printf("%s\t", inFile);
			outf.printf("%s\t", STATIONNAME);
			outf.printf("%s\t", VERSION);
			outf.printf("ObservedYears:%d", OBSYEARS);
			outf.printf("\tSIMULATEDYears:%d", YEARLENGTH);
			outf.printf("\tDataUnits:mm%n");
			outf.printf("CNvalue");
			outf.print("\t");

			for (i = 0; i < cnArray.length; i++) {

				if (cnArray[i] < 10) {
					outf.printf("CN00%.0f", cnArray[i]);
					outf.print("\t");
				} // if ends here

				if (cnArray[i] >= 10 && cnArray[i] < 100) {
					outf.printf("CN0%.0f", cnArray[i]);
					outf.print("\t");
				} // if endss here

				if (cnArray[i] >= 100 && cnArray[i] < 1000) {
					outf.printf("CN%.0f", cnArray[i]);
					outf.print("\t");
				} // if ends here

			} // for loop ends here
			outf.println();

			/*
			 * From here, precipitation values with the respective year are
			 * being taken from the input file and printed in the output file
			 */

			/*
			 * Temporary array to stores the sum-of-daily-Q generated for one
			 * particular year
			 */
			final double[] qArray = new double[cnArray.length];

			/* Initializing qArray */
			for (i = 0; i < qArray.length; i++) {
				qArray[i] = 0;
			} // for ends here

			while (((line = inputRainfallFile.readLine()) != null)) {

				/*
				 * Getting year printed with the precipitation data in the input
				 * file
				 */
				year = getYear(line, yPlace);

				/* Get precipitation data from the input file */
				precp = getPrecp(line, pPlace);

				/*
				 * Initially check is 2 and then it changes with the iteration
				 * of while loop
				 */
				if (year == check) {
					check++;

					final String num = Integer.toString(year - 1);

					/* Print the year */
					if (year < 11) {
						outf.print("year00" + num + "\t");
					} // if ends here

					if (year >= 11 && year < 101) {
						outf.print("year0" + num + "\t");
					} // if ends here

					if (year >= 101 && year < 1001) {
						outf.print("year" + num + "\t");
					} // if ends here

					/* Print the Q array and reset it to all 0's */
					for (i = 0; i < qArray.length; i++) {
						outf.printf("%8.2f", qArray[i], "\t");
						qArray[i] = 0;
					} // for ends here
					outf.println();

					/*
					 * RUNOFFcheck :
					 *
					 *
					 * //Print P and make it null----- to check runoff less that
					 * precipitation
					 *
					 * System.out.print("year:"+(year-1)+"\t\t") ;
					 *
					 * for(i = 0 ; i < qArray.length; i++) {
					 * System.out.printf("%.10f" , pArray[i]);
					 * System.out.print("\t") ; pArray[i] = 0 ; }
					 * System.out.println();
					 *
					 */

				} // if year check ends here

				/*
				 * In getYear() : when the last line of the file is found, which
				 * is an empty line, the function returns -1. Since we print the
				 * qArray after a particular line is processed, we need to check
				 * for this empty line to print the last processed qArray.
				 */
				if (year == -1) {

					/* Print the year */
					if (YEARLENGTH < 10) {
						outf.print("year00" + YEARLENGTH + "\t");
					} // if ends here

					if (YEARLENGTH >= 10 && YEARLENGTH < 100) {
						outf.print("year0" + YEARLENGTH + "\t");
					} // if ends here

					if (YEARLENGTH >= 100 && YEARLENGTH < 1000) {
						outf.print("year" + YEARLENGTH + "\t");
					} // if ends here

					/* Print the Q array and reset it to all 0's */
					for (i = 0; i < qArray.length; i++) {
						outf.printf("%8.2f", qArray[i], "\t");
						qArray[i] = 0;
					} // for ends here
					outf.println();

					/*
					 * RUNOFFcheck :
					 *
					 * // Print P and make it null so as to check if runoff is
					 * less that precipitation
					 *
					 * System.out.print("year:"+(year-1)+"\t\t") ;
					 *
					 * for(i = 0 ; i < qArray.length; i++) {
					 * System.out.printf("%.10f" , pArray[i]);
					 * System.out.print("\t") ; pArray[i] = 0 ; }
					 * System.out.println();
					 *
					 */

				} // if year == -1 check ends here

				for (i = 0; i < qArray.length; i++) {
					final double qValue = GetQ(precp, i);
					qArray[i] += qValue;
				} // for ends here
			} // while readline ends here

		} catch (final IOException e) {
			e.printStackTrace();
		}

		/* Closing all the files */
		try {
			inputRainfallFile.close();
			write.close();
			outf.close();
		} catch (final IOException e) {
			e.printStackTrace();
		}

	}// function fileRead ends here

	/*
	 * NOTE : This function works ONLY for the files that were available to us
	 * on the Cligen server, version 5.3 .
	 *
	 * This function reads the Station name, version of file, Observed years and
	 * simulated years.
	 */
	void readData(final String line, final int count) {

		/* Getting station name and version */
		if (count == 3) {
			/* Split the line in two halves and extract the needed data */
			STATIONNAME = line.substring(0, 45).trim();
			VERSION = line.substring(45, line.length()).trim().substring(0, 19);
		}

		/* Getting the number of observed years */
		if (count == 5) {
			/* Split the line in two halves and extract the needed data */
			OBSYEARS = Integer.parseInt(
					line.substring(34, 46).trim()); /* years observed */
			YEARLENGTH = Integer.parseInt(line.substring(63, 80)
					.trim()); /* initialized for the first time */
		}
	}// function readData ends

	/*
	 * To get the column place of precipitation data and year data on the file
	 */
	int colPlace(final String line, final char name) {

		/* variables */
		int flag = 0;
		int count = 0;

		while (flag == 0) {
			if (line.charAt(count) == name) {
				flag = 1;
			}
			count++;
		}
		return (count - 2);
	} // function colPlace ends

	/*
	 * Get year printed with the precipitation data in the input file
	 */
	int getYear(final String line, final int yPlace) {
		if (line != null && line.trim().length() > 0) {

			return (Integer.parseInt(line.substring(yPlace, (yPlace + 5)).trim()));
		}
		return -1; // return -1 if the line is empty
	} // function getYear ends

	/*
	 * Get precipitation data from the input file
	 */
	double getPrecp(final String line, final int pPlace) {
		if (line != null && line.trim().length() > 0) {

			return (Double.parseDouble(line.substring(pPlace, (pPlace + 5)).trim()));
		}

		return -1;
	} // function getPrecp ends

	/*
	 * Calculate Q based on one particular precipitate value
	 */
	double GetQ(final double precp, final int i) {
		double Q = 0;
		if (precp > pMinArray[i] && sArray[i] != 0) {
			Q = Math.pow((precp - (0.2 * sArray[i])), 2) / (precp + (0.8 * sArray[i]));
			return Q;
		} // if ends here
		return Q;
	} // function getQends

	private static final class LthiaUtils {

		private LthiaUtils() {

		}
	}
}// class ends
